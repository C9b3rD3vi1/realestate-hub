# Generated by Django 5.2.5 on 2025-08-22 06:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('icon', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='NeighborhoodFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('distance', models.CharField(max_length=50)),
                ('category', models.CharField(choices=[('education', 'Education'), ('healthcare', 'Healthcare'), ('shopping', 'Shopping'), ('transport', 'Transport'), ('recreation', 'Recreation'), ('other', 'Other')], default='other', max_length=20)),
                ('icon', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Testimonials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('buyer', 'Buyer'), ('seller', 'Seller'), ('agent', 'Agent'), ('admin', 'Admin')], default='buyer', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('pending', 'Pending Approval')], default='active', max_length=15)),
                ('bio', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CarProperties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to='car_images/')),
                ('description', models.TextField()),
                ('make', models.CharField(choices=[('toyota', 'Toyota'), ('honda', 'Honda'), ('ford', 'Ford'), ('chevrolet', 'Chevrolet'), ('nissan', 'Nissan'), ('bmw', 'BMW'), ('audi', 'Audi'), ('mercedes', 'Mercedes-Benz'), ('volkswagen', 'Volkswagen'), ('hyundai', 'Hyundai'), ('kia', 'Kia'), ('subaru', 'Subaru'), ('mazda', 'Mazda'), ('volvo', 'Volvo'), ('land_rover', 'Land Rover'), ('jaguar', 'Jaguar'), ('porsche', 'Porsche'), ('tesla', 'Tesla'), ('other', 'Other')], default='toyota', max_length=50)),
                ('model', models.CharField(choices=[('corolla', 'Corolla'), ('civic', 'Civic'), ('mustang', 'Mustang'), ('camaro', 'Camaro'), ('altima', 'Altima'), ('3_series', '3 Series'), ('a4', 'A4'), ('c_class', 'C-Class'), ('golf', 'Golf'), ('elantra', 'Elantra'), ('soul', 'Soul'), ('forester', 'Forester'), ('cx_5', 'CX-5'), ('xc60', 'XC60'), ('discovery', 'Discovery'), ('f_type', 'F-Type'), ('911', '911'), ('model_s', 'Model S'), ('model_3', 'Model 3'), ('202', '202'), ('v8', 'V8'), ('suv', 'SUV'), ('pickup', 'Pickup'), ('sedan', 'Sedan'), ('hatchback', 'Hatchback'), ('convertible', 'Convertible'), ('coupe', 'Coupe'), ('wagon', 'Wagon'), ('van', 'Van'), ('other', 'Other')], default='corolla', max_length=50)),
                ('year_of_manufacture', models.PositiveIntegerField()),
                ('mileage', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], default='petrol', max_length=20)),
                ('engine_size', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transmission', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automatic')], default='automatic', max_length=20)),
                ('number_of_doors', models.PositiveIntegerField()),
                ('number_of_seats', models.PositiveIntegerField()),
                ('color', models.CharField(max_length=50)),
                ('features', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location', models.CharField(max_length=255)),
                ('is_available', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Car Property',
                'verbose_name_plural': 'Car Properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CarPropertiesImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='car_images/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='listings.carproperties')),
            ],
        ),
        migrations.CreateModel(
            name='HousingProperties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to='housing_images/')),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location', models.CharField(max_length=255)),
                ('house_type', models.CharField(choices=[('apartment', 'Apartment'), ('bungalow', 'Bungalow'), ('maisonette', 'Maisonette'), ('duplex', 'Duplex'), ('studio', 'Studio'), ('bedsitter', 'Bedsitter'), ('villa', 'Villa'), ('townhouse', 'Townhouse'), ('penthouse', 'Penthouse'), ('cottage', 'Cottage'), ('mansion', 'Mansion'), ('detached', 'Detached House'), ('semi_detached', 'Semi-Detached House')], default='Apartment', max_length=255)),
                ('size', models.CharField(choices=[('studio', 'Studio'), ('bedsitter', 'Bedsitter'), ('1_bedroom', '1 Bedroom'), ('2_bedroom', '2 Bedroom'), ('3_bedroom', '3 Bedroom'), ('4_bedroom', '4 Bedroom'), ('5_bedroom', '5 Bedroom'), ('6_bedroom', '6 Bedroom'), ('7_plus_bedroom', '7+ Bedroom')], default='Studio', max_length=20)),
                ('is_available', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_new', models.BooleanField(default=True)),
                ('is_sold', models.BooleanField(default=False)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amenities', models.ManyToManyField(related_name='houses', to='listings.amenity')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('neighborhood', models.ManyToManyField(blank=True, to='listings.neighborhoodfeature')),
            ],
            options={
                'verbose_name': 'Housing Property',
                'verbose_name_plural': 'Housing Properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HousePropertiesImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='house_images/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='listings.housingproperties')),
            ],
        ),
        migrations.CreateModel(
            name='LandProperties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('image', models.ImageField(upload_to='land_images/')),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('location', models.CharField(max_length=255)),
                ('size', models.DecimalField(decimal_places=2, max_digits=10)),
                ('size_unit', models.CharField(choices=[('acres', 'Acres'), ('sq_ft', 'Square Feet'), ('hectares', 'Hectares')], default='acres', max_length=10)),
                ('land_type', models.CharField(choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('agricultural', 'Agricultural'), ('industrial', 'Industrial'), ('mixed_use', 'Mixed Use'), ('recreational', 'Recreational'), ('institutional', 'Institutional')], default='residential', max_length=20)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amenities', models.ManyToManyField(blank=True, to='listings.amenity')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='land_properties', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('neighborhood', models.ManyToManyField(blank=True, related_name='lands', to='listings.neighborhoodfeature')),
            ],
            options={
                'verbose_name_plural': 'Land Properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LandPropertiesImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='land_images/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('land', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='listings.landproperties')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tx_ref', models.CharField(max_length=100, unique=True, verbose_name='Transaction Reference')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='KES', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PriceHistoryCar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('date_recorded', models.DateField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='listings.carproperties')),
            ],
        ),
        migrations.CreateModel(
            name='PriceHistoryHouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('date_recorded', models.DateField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='listings.housingproperties')),
            ],
        ),
        migrations.CreateModel(
            name='PriceHistoryLand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('date_recorded', models.DateField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='listings.landproperties')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('favorites', models.ManyToManyField(blank=True, related_name='favorited_by', to='listings.carproperties')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyTestimonialCar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('comment', models.TextField()),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('avatar_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testimonials', to='listings.carproperties')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyTestimonialHouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('comment', models.TextField()),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('avatar_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testimonials', to='listings.housingproperties')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyTestimonialLand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('comment', models.TextField()),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('avatar_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testimonials', to='listings.landproperties')),
            ],
        ),
        migrations.CreateModel(
            name='RentalHouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('size', models.PositiveIntegerField(help_text='Size in square meters')),
                ('house_type', models.CharField(choices=[('AP', 'Apartment'), ('VL', 'Villa'), ('ST', 'Studio'), ('S', 'Single'), ('B', 'Bedseater'), ('1 BED', '1 Bedroom'), ('2 BED', '2 Bedrooms'), ('3 BED', '3 Bedrooms'), ('4 BED', '4 Bedrooms'), ('5 BED', '5 Bedrooms'), ('6 BED', '6 Bedrooms'), ('TH', 'Townhouse'), ('CN', 'Condominium')], max_length=50)),
                ('availability', models.BooleanField(default=True)),
                ('description', models.TextField()),
                ('main_image', models.ImageField(upload_to='houses/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='houses', to=settings.AUTH_USER_MODEL)),
                ('amenities', models.ManyToManyField(blank=True, to='listings.amenity')),
            ],
        ),
        migrations.CreateModel(
            name='ContactAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('message', models.TextField()),
                ('contacted_at', models.DateTimeField(auto_now_add=True)),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.rentalhouse')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=10)),
                ('message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.rentalhouse')),
            ],
        ),
        migrations.CreateModel(
            name='RentalHouseImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='houses/gallery/')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='listings.rentalhouse')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan', models.CharField(choices=[('free', 'Free'), ('premium', 'Premium'), ('business', 'Business'), ('enterprise', 'Enterprise')], default='free', max_length=20)),
                ('duration', models.PositiveIntegerField(choices=[(30, '1 Month'), (90, '3 Months'), (180, '6 Months'), (365, '1 Year')], default=30, help_text='Duration in days')),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('auto_renew', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='listings.rentalhouse')),
            ],
            options={
                'unique_together': {('user', 'house')},
            },
        ),
    ]
